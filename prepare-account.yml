---
#
#  This adds IAM requirements to allow the deployment script to be
#  run.  Since it creates and modifies IAM users roles and policies it
#  needs to be run with full IAM account manager privilages.
#

- hosts: localhost
  vars_files:
    - "aws_credentials_{{aws_account_name}}_iam_admin.yml"
  vars:
    ansible_connection: local
    deploy_user: ansible_deploy_cf

  tasks:
    - name: set up AWS credentials
      block:
        - set_fact:
            aws_connection_info: &aws_connection_info
              aws_region: '{{ aws_region }}'
              aws_access_key: '{{ aws_access_key }}'
              aws_secret_key: '{{ aws_secret_key }}'
              security_token: '{{ security_token }}'
          no_log: true

    - name: create IAM definitions
      block:
        - iam_user:
            name: {{deploy_user}}
            # FullAccess should be eliminated but AWS doesn't have any
            # standard limited policies that match so we will need to
            # create our own policies for that.  Do it later.
            managed_policy:
              - arn:aws:iam::aws:policy/AWSLambdaFullAccess
              - arn:aws:iam::aws:policy/IAMFullAccess
              - arn:aws:iam::aws:policy/AmazonEC2FullAccess
            state: present
            <<: *aws_connection_info

        - iam_role:
            name: cloudflare_sg_lambda
            managed_policy:
              - arn:aws:iam::aws:policy/AmazonEC2FullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            state: present
            assume_role_policy_document: "{{ lookup('file','assume-lambda-role-policy.json') }}"
            <<: *aws_connection_info

    - name: set up access keys
      block:
        - shell: |
            for i in $(aws iam list-access-keys  --user-name={{ deploy_user }} |
                       grep AccessKeyId | sed -e 's/",//' -e 's/.*"//' )
            do
              aws iam delete-access-key  --user-name={{ deploy_user }} --access-key-id=$i
            done
          environment:
            AWS_ACCESS_KEY_ID: '{{aws_access_key}}'
            AWS_SECRET_ACCESS_KEY: '{{aws_secret_key}}'
            AWS_DEFAULT_REGION: '{{aws_region}}'
            # AWS_SESSION_TOKEN: '{{security_token}}'

        - command: "aws iam create-access-key --user-name={{ deploy_user }}"
          environment:
            AWS_ACCESS_KEY_ID: '{{aws_access_key}}'
            AWS_SECRET_ACCESS_KEY: '{{aws_secret_key}}'
            AWS_DEFAULT_REGION: '{{aws_region}}'
            # AWS_SESSION_TOKEN: '{{security_token}}'
          register: cred_create_result

        - copy:
            content: |
              ---
              aws_region: {{ aws_region }}
              aws_access_key: {{(cred_create_result.stdout | from_json).AccessKey.AccessKeyId}}
              aws_secret_key: {{(cred_create_result.stdout | from_json).AccessKey.SecretAccessKey}}
              security_token:
            dest: /tmp/id_output

        - fetch:
            src: /tmp/id_output
            dest: "aws_credentials_{{aws_account_name}}.yml"
            flat: true
