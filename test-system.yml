---
#
#  This is based on the lambda and lambda policy testcases out of Ansible's integration tests
#
#  As such it is licensed under the GPLv3 with copyright belonging to various including:
#
#  * Michael De La Rue
#  * William Thames
#  * The Ansible Project
#
#  Further work on this done as paid work by Michael De La Rue for paddle.com.
#


- hosts: localhost
  vars_files:
    - aws_credentials.yml
  vars:
    ansible_connection: local
    lambda_name: cf-security-group-update
    lambda_function_name: cf-security-group-update-test
    lambda_handler: "{{lambda_name}}.lambda_handler"
    security_group_name: cloudflare_lambda_test_sg
    output_dir: ~/ansible_testing

  tasks:
    - name: set up AWS credentials
      block:
        - set_fact:
            aws_connection_info: &aws_connection_info
              aws_region: '{{ aws_region }}'
              aws_access_key: '{{ aws_access_key }}'
              aws_secret_key: '{{ aws_secret_key }}'
              security_token: '{{ security_token }}'
          no_log: true

    - tags:
        - given that I have a security group which is empty
      block:

        - name: delete security group if present
          ec2_group:
            name: "{{ security_group_name }}"
            state: absent
            <<: *aws_connection_info

        - name: create security group recording id
          ec2_group:
            name: "{{ security_group_name }}"
            state: present
            description: security group for testing cloudflare ip lambda
            <<: *aws_connection_info
          register: group_create

    - tags:
        - when I trigger my IP address updater lambda
      block:

        - name: test lambda works
          execute_lambda:
            name: "{{lambda_function_name}}"
            <<: *aws_connection_info
          register: result

    # Then the cloudflare addresses should be included in the security group


    - tags:
        - then that security group should be updated with cloudflare IP addresses
      block:
        - ec2_group_facts:
            filters:
              group-name: "{{ security_group_name }}"
            <<: *aws_connection_info
          register: group_res

        - name: check that some cloudflare addresses are there and we have the right group
          assert:
            that:
              - "'108.162.192.0/18' in {{group_res | to_json | quote}}"
              - "'{{ security_group_name }}' in {{group_res | to_json | quote}}"
            msg: "failed to create security group"

            # FIXME: this doesn't work because boto3 fails to remove all of a protocol
            # need to check with AWS what the actual command should be.

            # - name: check that we clean out wrong rules
            #   assert:
            #     that:
            #       - "'0.0.0.0' not in {{group_res | to_json | quote}}"
            #     msg: "failed to clean up security group"

