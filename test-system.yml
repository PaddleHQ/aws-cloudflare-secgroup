---
#
#  This is based on the lambda and lambda policy testcases out of Ansible's integration tests
#  
#  As such it is licensed under the GPLv3 with copyright belonging to various including:
#  
#  * Michael De La Rue
#  * William Thames
#  * The Ansible Project
#  
#  Further work on this done as paid work by Michael De La Rue for paddle.com. 
#  


- hosts: localhost
  vars_files:
    - aws_credentials.yml
  vars:
    lambda_name: cf-security-group-update
    lambda_function_name: cf-security-group-update-test
    lambda_handler: "{{lambda_name}}.handler"
    security_group_name: cloudflare_lambda_test_sg
    output_dir: ~/ansible_testing

# Precondition: set up AWS paramerers

  tasks:
    - block:
        - name: set up AWS credentials
          set_fact:
            aws_connection_info: &aws_connection_info
              aws_region: '{{ aws_region }}'
              aws_access_key: '{{ aws_access_key }}'
              aws_secret_key: '{{ aws_secret_key }}'
              security_token: '{{ security_token }}'
          no_log: yes


    # Given that the security group for cloudflare addresses is empty

    - block:
        - name: delete security group if present
          ec2_group:
            name: "{{ security_group_name }}"
            state: absent
            <<: *aws_connection_info

    # And that we have a lambda installed

        # ============================================================
        # direct zip file upload
        - name: move lambda into place for archive module
          copy:
            src: "{{lambda_name}}.py"
            dest: "{{output_dir}}/{{lambda_name}}.py"

        - name: bundle lambda into a zip
          archive:
            format: zip
            path: "{{output_dir}}/{{lambda_name}}.py"
            dest: "{{output_dir}}/{{lambda_name}}.zip"
          register: zip_res

        # This should exist, but there's no expectation that the test user should be able to
        # create/update this role, merely validate that it's there.
        # Use ansible -m iam_role -a 'name=ansible_lambda_role
        # assume_role_policy_document={{ lookup("file", "test/integration/targets/lambda_policy/files/minimal_trust_policy.json", convert_data=False) }}
        # ' -vvv localhost
        # to create this through more privileged credentials before running this test suite.
        # - name: create minimal lambda role
        #   iam_role:
        #     name: ansible_lambda_role
        #     assume_role_policy_document: "{{ lookup('file', 'minimal_trust_policy.json', convert_data=False) }}"
        #     create_instance_profile: no
        #     <<: *aws_connection_info
        #   register: iam_role

        # - name: wait 10 seconds for role to become available
        #   pause:
        #     seconds: 10
        #   when: iam_role.changed

        - name: test state=present - upload the lambda
          lambda:
            name: "{{lambda_function_name}}"
            runtime: "python3.6"
            handler: "{{lambda_handler}}"
            role: "arn:aws:iam::455225740156:role/service-role/basicLambdaRole"
            zip_file: "{{zip_res.dest}}"
            <<: *aws_connection_info
          register: lambda_result

    # When we make sure the lambda has been run

    - block:
        - name: test lambda works
          execute_lambda:
            name: "{{lambda_function_name}}"
            <<: *aws_connection_info
          register: result

    # Then the cloudflare addresses should be included in the security group


    - block:
        - ec2_group_facts:
            filters:
              group-name: "{{ security_group_name }}"
          register: group_res

        - name: check that some cloudflare addresses are there
          assert:
            that:
              - "108.162.192.0/18 in {{group_res}}"
              - "{{ security_group_name in {{group_res}}"
            msg: "failed to create security group"
            
    - always:

      # ============================================================
      - name: destroy lambda for test cleanup if created
        lambda:
          name: "{{lambda_function_name}}"
          <<: *aws_connection_info
          state: absent
        register: result
        ignore_errors: yes

      - name: delete security group if present
        ec2_group:
          name: "{{ security_group_name }}"
          <<: *aws_connection_info
          state: absent
